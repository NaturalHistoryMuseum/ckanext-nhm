--- ckanext/ga_report/download_analytics.py
+++ ckanext/ga_report/download_analytics.py
@@ -61,7 +61,7 @@
 
 
     def for_date(self, for_date):
-        assert isinstance(since_date, datetime.datetime)
+        assert isinstance(for_date, datetime.datetime)
         periods = [] # (period_name, period_complete_day, start_date, end_date)
         if self.period == 'monthly':
             first_of_the_months_until_now = []
@@ -103,6 +103,7 @@
 
 
     def download_and_store(self, periods):
+
         for period_name, period_complete_day, start_date, end_date in periods:
             log.info('Period "%s" (%s - %s)',
                      self.get_full_period_name(period_name, period_complete_day),
@@ -118,16 +119,15 @@
                 # Clean out old url data before storing the new
                 ga_model.pre_update_url_stats(period_name)
 
-                accountName = config.get('googleanalytics.account')
-
                 log.info('Downloading analytics for dataset views')
-                data = self.download(start_date, end_date, '~/%s/dataset/[a-z0-9-_]+' % accountName)
+
+                data = self.download(start_date, end_date, '~/dataset/[a-z0-9-_]+')
 
                 log.info('Storing dataset views (%i rows)', len(data.get('url')))
                 self.store(period_name, period_complete_day, data, )
 
                 log.info('Downloading analytics for publisher views')
-                data = self.download(start_date, end_date, '~/%s/publisher/[a-z0-9-_]+' % accountName)
+                data = self.download(start_date, end_date, '~/publisher/[a-z0-9-_]+')
 
                 log.info('Storing publisher views (%i rows)', len(data.get('url')))
                 self.store(period_name, period_complete_day, data,)
@@ -212,16 +212,15 @@
 
         packages = []
         log.info("There are %d results" % results['totalResults'])
-        for entry in results.get('rows'):
+        for entry in results.get('rows', []):
             (loc,pageviews,visits) = entry
-            url = _normalize_url('http:/' + loc) # strips off domain e.g. www.data.gov.uk or data.gov.uk
 
-            if not url.startswith('/dataset/') and not url.startswith('/publisher/'):
+            if not loc.startswith('/dataset/') and not loc.startswith('/publisher/'):
                 # filter out strays like:
                 # /data/user/login?came_from=http://data.gov.uk/dataset/os-code-point-open
                 # /403.html?page=/about&from=http://data.gov.uk/publisher/planning-inspectorate
                 continue
-            packages.append( (url, pageviews, visits,) ) # Temporary hack
+            packages.append( (loc, pageviews, visits,) ) # Temporary hack
         return dict(url=packages)
 
     def store(self, period_name, period_complete_day, data):
@@ -643,7 +642,7 @@
             results = dict(url=[])
 
 
-        result_data = results.get('rows')
+        result_data = results.get('rows', [])
         data = {}
         for result in result_data:
             data[result[0]] = data.get(result[0], 0) + int(result[2])

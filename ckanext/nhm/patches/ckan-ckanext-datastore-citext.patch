diff --git a/ckanext/datastore/db.py b/ckanext/datastore/db.py
index 6cc6c60..d15d12e 100644
--- a/ckanext/datastore/db.py
+++ b/ckanext/datastore/db.py
@@ -12,6 +12,7 @@ import hashlib
 import pylons
 import distutils.version
 import sqlalchemy
+from sqlalchemy.event import listen
 from sqlalchemy.exc import (ProgrammingError, IntegrityError,
                             DBAPIError, DataError)
 import psycopg2.extras
@@ -83,6 +84,23 @@ def _is_valid_table_name(name):
         return False
     return _is_valid_field_name(name)
 
+def _register_citext_type(conn, con_record):
+    """
+    Enables unicode decoding for PostgreSQL CITEXT column type
+    https://gist.github.com/mfenniak/3006798
+    """
+    from psycopg2.extensions import new_type, register_type
+    from contextlib import closing
+    def cast_citext(in_str, cursor):
+        if in_str == None:
+            return None
+        return unicode(in_str, cursor.connection.encoding)
+    with closing(conn.cursor()) as c:
+        c.execute("SELECT pg_type.oid FROM pg_type WHERE typname = 'citext'")
+        citext_oid = c.fetchone()
+        if citext_oid != None:
+            citext_type = new_type(citext_oid, "CITEXT", cast_citext)
+            register_type(citext_type)
 
 def _get_engine(data_dict):
     '''Get either read or write engine.'''
@@ -91,6 +109,8 @@ def _get_engine(data_dict):
 
     if not engine:
         engine = sqlalchemy.create_engine(connection_url)
+        # Register the CITEXT field type,
+        listen(engine, "first_connect", _register_citext_type)
         _engines[connection_url] = engine
     return engine
 
@@ -460,7 +480,7 @@ def _build_fts_indexes(connection, data_dict, sql_index_str_method, fields):
             continue
 
         field_str = field['id']
-        if field['type'] not in ['text', 'tsvector']:
+        if field['type'] not in ['text', 'citext', 'tsvector']:
             field_str = cast_as_text(field_str)
         else:
             field_str = u'"{0}"'.format(field_str)
@@ -769,7 +789,7 @@ def _to_full_text(fields, record):
         if not value:
             continue
 
-        if field['type'].lower() == 'text':
+        if field['type'].lower() in ['text', 'citext']:
             full_text.append(value)
         else:
             full_text.extend(json_get_values(value))
diff --git a/ckanext/datastore/helpers.py b/ckanext/datastore/helpers.py
index 1161c2c..2dc2e5f 100644
--- a/ckanext/datastore/helpers.py
+++ b/ckanext/datastore/helpers.py
@@ -36,4 +36,4 @@ def _strip(input):
 
 
 def should_fts_index_field_type(field_type):
-    return field_type.lower() in ['tsvector', 'text', 'number']
+    return field_type.lower() in ['tsvector', 'text', 'citext', 'number']
